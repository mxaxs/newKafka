version: "3.8"

services:

  api:
    container_name: api
    build:
      context: .
    image: moleculer-project
    env_file: docker-compose.env
    environment:
      SERVICES: api
      PORT: 8080
    depends_on:
      - zookeeper
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-gw.rule=PathPrefix(`/`)"
      - "traefik.http.services.api-gw.loadbalancer.server.port=8080"
    networks:
      - internal
  
  channel:
    container_name: channel
    build:
      context: .
    image: moleculer-project
    env_file: docker-compose.env
    environment:
      SERVICES: channel
    depends_on:
      - zookeeper
    networks:
      - internal
  
  user:
    container_name: user
    build:
      context: .
    image: moleculer-project
    env_file: docker-compose.env
    environment:
      SERVICES: user
    depends_on:
      - zookeeper
    networks:
      - internal
  
  project:
    container_name: project
    build:
      context: .
    image: moleculer-project
    env_file: docker-compose.env
    environment:
      SERVICES: project
    depends_on:
      - zookeeper
    networks:
      - internal
  
  node:
    container_name: node
    build:
      context: .
    image: moleculer-project
    env_file: docker-compose.env
    environment:
      SERVICES: node
    depends_on:
      - zookeeper
    networks:
      - internal
  
  exams:
    container_name: exams
    build:
      context: .
    image: moleculer-project
    env_file: docker-compose.env
    environment:
      SERVICES: exams
    depends_on:
      - zookeeper
    networks:
      - internal
  
  hub:
    container_name: hub
    build:
      context: .
    image: moleculer-project
    env_file: docker-compose.env
    environment:
      SERVICES: hub
    depends_on:
      - zookeeper
    networks:
      - internal

  zookeeper:
    container_name: zookeeper
    hostname: zookeeper
    image: 'confluentinc/cp-zookeeper:latest'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ZOOKEEPER_CLIENT_PORT=2181
    volumes:
      - ./vols/vol1/zk-data:/var/lib/zookeeper/data
      - ./vols/vol2/zk-txn-logs:/var/lib/zookeeper/log

    networks:
      - internal

  kafka1:
    hostname: kafka1
    container_name: kafka1
    image: 'confluentinc/cp-kafka:latest'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_HOST_NAME: kafka1
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,OUTSIDE://kafka1:9092 
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LISTENERS: INTERNAL://:19092, OUTSIDE://:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT, OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_PROTOCOL_LISTENERS: INTERNAL://:19092, OUTSIDE://:9092
      KAFKA_INTER_BROKER_PROTOCOL_ADVERTISED_LISTENERS: INTERNAL://:19092, OUTSIDE://:9092
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_HEAP_OPTS: "-Xmx512M -Xms256M"
      
    depends_on:
      - zookeeper
    volumes:
      - ./vols/vol3/kafka1-data:/var/lib/kafka/data

    networks:
      - internal

  kafka2:
    hostname: kafka2
    container_name: kafka2
    image: 'confluentinc/cp-kafka:latest'
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_HOST_NAME: kafka2
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:19093,OUTSIDE://kafka2:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LISTENERS: INTERNAL://:19093, OUTSIDE://:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT, OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_PROTOCOL_LISTENERS: INTERNAL://:19093, OUTSIDE://:9093
      KAFKA_INTER_BROKER_PROTOCOL_ADVERTISED_LISTENERS: INTERNAL://:19093, OUTSIDE://:9093
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_HEAP_OPTS: "-Xmx512M -Xms256M"
      
    depends_on:
      - zookeeper
    volumes:
      - ./vols/vol3/kafka2-data:/var/lib/kafka/data

    networks:
      - internal

  kafka3:
    hostname: kafka3
    container_name: kafka3
    image: 'confluentinc/cp-kafka:latest'
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_HOST_NAME: kafka3
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka3:19094,OUTSIDE://kafka2:9094
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LISTENERS: INTERNAL://:19094, OUTSIDE://:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT, OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_PROTOCOL_LISTENERS: INTERNAL://:19094, OUTSIDE://:9094
      KAFKA_INTER_BROKER_PROTOCOL_ADVERTISED_LISTENERS: INTERNAL://:19094, OUTSIDE://:9094
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_HEAP_OPTS: "-Xmx512M -Xms256M"
      
    depends_on:
      - zookeeper
    volumes:
      - ./vols/vol3/kafka3-data:/var/lib/kafka/data

    networks:
      - internal

  control-center:
      container_name: control-center
      image: confluentinc/cp-enterprise-control-center:latest
      platform: linux/arm64
      hostname: control-center
      depends_on:
        - kafka1
      ports:
        - 9021:9021
      expose:
        - 9021

      environment:
        CONTROL_CENTER_BOOTSTRAP_SERVERS: kafka1:19092,kafka2:19093,kafka3:19094
        CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeper:2181'
        CONTROL_CENTER_REPLICATION_FACTOR: 3
        CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 3
        CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 3
        CONFLUENT_METRICS_TOPIC_REPLICATION: 3
        CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"

        PORT: 9021
      networks:
        - internal

  traefik:
    hostname: traefik
    container_name: traefik
    image: traefik:v2.1
    command:
      - "--api.insecure=true" # Don't do that in production!
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - internal
      - default
  
  prometheus:
    hostname: prometheus
    container_name: prometheus
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus:/etc/prometheus
    networks:
      - internal

  grafana:
    hostname: grafana
    container_name: grafana
    image: grafana/grafana
    ports:
      - "3000:3000"
    volumes:
      - ./config/grafana:/etc/grafana/provisioning
    networks:
      - internal

networks:
  internal:
